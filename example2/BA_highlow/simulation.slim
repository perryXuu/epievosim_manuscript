function (numeric)additive_trait(o<Mutation> muts, s trait_type, f cap)
{
	trait_value = size(muts) ? sum(muts.getValue(trait_type)) else 0.0;
	if (trait_value < cap)
	{
		return(trait_value);
	}
	else
	{
		return(cap);
	}
}


function (numeric)bialleleic_trait(o<Mutation> muts, s trait_type, numeric trait_locations, f cap, o<DataFrame> effsize_df)
{
	which_gene = unique(sapply(muts.position, "asInteger((findInterval(applyValue, trait_locations) + 1) / 2);"));
	which_trait = strsplit(trait_type, sep="e")[1];
	trait_value = size(which_gene) ? sum( effsize_pos.subset(which_gene - 1, current_epoch + 3)) else 0.0;
	if (trait_value < cap)
	{
		return(trait_value);
	}
	else
	{
		return(cap);
	}
}


initialize() {

	suppressWarnings(T);
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(nucleotideBased=T);
	initializeTreeSeq();
	

	str_pars = c("cwdir", "trans_type", "dr_type", "ref_path", "causal_gene_path", "seed_host_matching_path", "contact_network_path", "epi_model");
	int_pars = c("n_generation", "cap_withinhost", "seed_size", "n_epoch", "n_massive_sample", "host_size", "cap_withinhost");
	float_pars = c("mut_rate", "within_host_reproduction_rate");
	list_int_pars = c("epoch_changing_generation", "transmissibility_effsize", "drugresistance_effsize", "massive_sample_generation");
	list_float_pars = c("S_IE_rate", "I_R_rate", "R_S_rate", "latency_prob", "E_I_rate", "I_E_rate", "E_R_rate", "sample_rate", "recovery_prob_after_sampling", "massive_sample_prob", "massive_sample_recover_prob", "cap_transmissibility", "cap_drugresist");
	bin_pars = c("within_host_reproduction", "use_genetic_model", "super_infection");

	// config_path has to be command line input
	defineGlobal("configs", readFile(config_path));

	// Reading all the variables
	for (l in configs)
	{
		ll = strsplit(l, ":");
		if (any(ll[0]==int_pars))
		{
			defineGlobal(ll[0], asInteger(ll[1]));
		}
		else if (any(ll[0]==str_pars))
		{
			defineGlobal(ll[0], ll[1]);
		}
		else if (any(ll[0]==float_pars))
		{
			defineGlobal(ll[0], asFloat(ll[1]));	
		}
		else if (any(ll[0]==list_int_pars))
		{
			defineGlobal(ll[0], asInteger(strsplit(ll[1], sep=",")));	
		}
		else if (any(ll[0]==list_float_pars))
		{
			defineGlobal(ll[0], asFloat(strsplit(ll[1], sep=",")));	
		}
		else if (any(ll[0]==bin_pars))
		{
			defineGlobal(ll[0], asLogical(ll[1]));	
		}
	}

	defineGlobal("current_epoch", 0);

	if (strsuffix(cwdir, "/") == F)
	{
		defineGlobal("cwdir", paste0(cwdir, "/"));
	}





	defineConstant("L", initializeAncestralNucleotides(ref_path));
	initializeRecombinationRate(0);

	initializeMutationTypeNuc(0, 1, "f", 0.0); // Neutral mutations
	initializeGenomicElementType(0, 0, 1.0, mmJukesCantor(mut_rate / 3));
	initializeMutationTypeNuc(1, 1, "f", 0.0);  // Mutations contributing to traits
	initializeGenomicElementType(1, 1, 1.0, mmJukesCantor(mut_rate / 3));

		range_genes = c();
	defineGlobal("effsize_pos", readCSV(causal_gene_path, colNames = T));
	n_causal_genes = effsize_pos.nrow;
	ncol_idx = effsize_pos.ncol - 1;
	trait_names = effsize_pos.colNames[3:ncol_idx];
	n_trans_traits = sum(strcontains(trait_names, "transmissibility"));
	n_dr_traits = sum(strcontains(trait_names, "dr"));
	initializeGenomicElement(0, 0, effsize_pos.subset(0,1) - 1);
	nminus1 = n_causal_genes - 1;
	trait_locs = c(0);

	for (i in 1:nminus1)
	{
		range_genes = c(range_genes, effsize_pos.subset(i-1,1):effsize_pos.subset(i-1,2));
		trait_locs = c(trait_locs, effsize_pos.subset(i-1,1), effsize_pos.subset(i-1,2));
		initializeGenomicElement(1, effsize_pos.subset(i-1,1), effsize_pos.subset(i-1,2) - 1);
		initializeGenomicElement(0, effsize_pos.subset(i-1,2), effsize_pos.subset(i,1) - 1);
	}


	range_genes = c(range_genes, effsize_pos.subset(nminus1,1):effsize_pos.subset(nminus1,2));
	trait_locs = c(trait_locs, effsize_pos.subset(nminus1,1), effsize_pos.subset(nminus1,2));
	initializeGenomicElement(1, effsize_pos.subset(nminus1,1), effsize_pos.subset(nminus1,2) - 1);
	initializeGenomicElement(0, effsize_pos.subset(nminus1,2), L-1);

	defineGlobal("n_causal_genes", n_causal_genes);
	defineGlobal("n_trans_traits", n_trans_traits);
	defineGlobal("n_dr_traits", n_dr_traits);
	defineGlobal("trait_locs", trait_locs);
	defineGlobal("range_genes", range_genes);

}

mutation(m1) {

	// Set mutational effects for new m2 mutation 
	which_gene = asInteger((findInterval(mut.position, trait_locs) + 1) / 2);

	if (n_trans_traits>0)
	{
		for (t_num in 1:n_trans_traits)
		{
			mut.setValue(paste0("trans_", t_num), effsize_pos.subset(which_gene - 1, t_num + 2)); 
		}
	}
	
	if (n_dr_traits>0)
	{
		for (t_num in 1:n_dr_traits)
		{
			mut.setValue(paste0("dr_", t_num), effsize_pos.subset(which_gene - 1, t_num + 2 + n_trans_traits)); 
		}
	}
	
	return T;

}

1 first() {
	//// Turn on warnings
	suppressWarnings(F);

	// self reproduction (for mutation accumulation) run every generation
	community.rescheduleScriptBlock(s0, ticks = 2:n_generation);
	all_gens_vector = 2:n_generation;

	// s1, transmission block with genetic effect sizes
	// s13, transmission block without genetic effect sizes
	if (use_genetic_model)
	{
		not_genetic_gens = c();
		not_genetic_epochs = which(transmissibility_effsize==0);
		for (epoch_indx in not_genetic_epochs)
		{
			if (epoch_indx == 0)
			{
				start_gen = 2;
				end_gen = epoch_changing_generation[epoch_indx] - 1;
			}
			else if (epoch_indx == n_epoch - 1)
			{
				start_gen = epoch_changing_generation[epoch_indx - 1];
				end_gen = n_gen;
			}
			else
			{
				start_gen = epoch_changing_generation[epoch_indx - 1];
				end_gen = epoch_changing_generation[epoch_indx] - 1;
			}
			not_genetic_gens = c(not_genetic_gens, start_gen:end_gen);
		}
		if (length(not_genetic_epochs) > 0)
		{
			community.rescheduleScriptBlock(s13, ticks = not_genetic_gens);
			community.rescheduleScriptBlock(s1, ticks = setDifference(all_gens_vector, not_genetic_gens));
		}
		else
		{
			community.rescheduleScriptBlock(s1, ticks = all_gens_vector);
		}
	}
	else
	{
		community.rescheduleScriptBlock(s13, ticks = all_gens_vector);
	}


	// s2, within-host reproduction block, will be disabled if within_host_evolution is false
	if (within_host_reproduction==T)
	{
		community.rescheduleScriptBlock(s2, ticks = all_gens_vector);
	}

	// s6, kill all old pathogens, run at all generations as a complement of the mutation process
	community.rescheduleScriptBlock(s6, ticks = all_gens_vector);

	// s3, State transition process without drug resistance
	// s7, treatment block, will activate only at the generations specified by treatment_gens as substitution of s3
	not_dr_gens = c();
	not_dr_epochs = which(drugresistance_effsize==0);

	if (n_epoch==1)
	{
		if (isNULL(not_dr_epochs)==F)
		{
			not_dr_gens = c(not_dr_gens, 2:n_generation);
		}
	}
	else
	{
		for (epoch_indx in not_dr_epochs)
		{
			if (epoch_indx == 0)
			{
				start_gen = 2;
				end_gen = epoch_changing_generation[epoch_indx] - 1;
			}
			else if (epoch_indx == n_epoch - 1)
			{
				start_gen = epoch_changing_generation[epoch_indx - 1];
				end_gen = n_generation;
			}
			else
			{
				start_gen = epoch_changing_generation[epoch_indx - 1];
				end_gen = epoch_changing_generation[epoch_indx] - 1;
			}
			not_dr_gens = c(not_dr_gens, start_gen:end_gen);
		}
	}
	
	if (any(not_dr_epochs > 1))
	{
		community.rescheduleScriptBlock(s3, ticks = not_dr_gens);
	}

	if (length(not_dr_gens) < n_generation - 1)
	{
		if (isNULL(not_dr_gens))
		{
			community.rescheduleScriptBlock(s7, ticks = 2:n_generation);
		}
		else
		{
			community.rescheduleScriptBlock(s7, ticks = setDifference(all_gens_vector, not_dr_gens));
		}
	}


	// s12, epoch changing, only executed in epoch_changing_generations
	if (n_epoch > 1)
	{
		community.rescheduleScriptBlock(s12, ticks = epoch_changing_generation);
	}

	// s11, massive sampling event, only executed at certain generations
	if (n_massive_sample > 0)
	{
		community.rescheduleScriptBlock(s11, ticks = massive_sample_generation);
	}

	// s10, process this generation's new infections.
	community.rescheduleScriptBlock(s10, ticks = all_gens_vector);

	// s9, process recovered individuals
	if (any(R_S_rate > 0))
	{
		RS_gens = c();
		RS_epochs = which(R_S_rate!=0);
		for (epoch_indx in RS_epochs)
		{
			if (epoch_indx == 0)
			{
				start_gen = 2;
				if (n_epoch > 1)
				{
					end_gen = epoch_changing_generation[epoch_indx] - 1;
				}
				else
				{
					end_gen = n_generation;
				}
			}
			else if (epoch_indx == n_epoch - 1)
			{
				start_gen = epoch_changing_generation[epoch_indx - 1];
				end_gen = n_generation;
			}
			else
			{
				start_gen = epoch_changing_generation[epoch_indx - 1];
				end_gen = epoch_changing_generation[epoch_indx] - 1;
			}
			RS_gens = c(RS_gens, start_gen:end_gen);
		}
		community.rescheduleScriptBlock(s9, ticks = RS_gens);
	}

	// s4, logging this generation's compartment information. Run for all generations
	community.rescheduleScriptBlock(s4, ticks = all_gens_vector);

	// s5, end of simulation block
	community.rescheduleScriptBlock(s5, ticks = n_generation);

	// s8, process the exposed hosts
	if (epi_model=="SEIR")
	{
		community.rescheduleScriptBlock(s8, ticks = all_gens_vector);
	}
}

1 early() {
	seeds_structure = readCSV(seed_host_matching_path, colNames=T);

	// Add N($sample_size) subpopulations (representing N humans in the population) with 0 or 1 elements (Susceptible or Infected)
	labels = c();
	seed_count = 0;

	seedsvcfpath = paste0(cwdir, "originalvcfs/");


	for (i in 1:host_size)
	{
		if (i == seeds_structure.subset(seed_count, 1) + 1)
		{
			
			sim.addSubpop(i - 1, 1, haploid=T); // Infected hosts
			current_subpop = sim.subpopulations[i - 1];
			labels = c(labels, 2);
			current_subpop.genomes.readFromVCF(paste0(seedsvcfpath, "seed.", seeds_structure.subset(seed_count, 0), ".vcf"));
			current_subpop.individuals.tag = seeds_structure.subset(seed_count, 0); // id of seed
			sim.treeSeqRememberIndividuals(current_subpop.individuals);

			if (seed_count < seed_size - 1)
			{
				seed_count = seed_count + 1;
			}
		}
		else
		{
			sim.addSubpop(i - 1, 0, haploid=T); // Susceptible
			current_subpop = sim.subpopulations[i - 1];
			labels = c(labels, 0);
		}
		current_subpop.tag = i - 1;
		current_subpop.setValue("Contacts", c());
	}


	// change default mutation type and selection coefficient	
	allmuts = sim.subpopulations.individuals.genome1.mutations;
	if (n_trans_traits > 0) {
		for (mut in allmuts)
		{
			if (any(mut.position == range_genes))
			{
				mut.setMutationType(1);
				which_gene = asInteger((findInterval(mut.position, trait_locs) + 1) / 2);

				for (t_num in 1:n_trans_traits)
				{
					mut.setValue(paste0("trans_", t_num), effsize_pos.subset(which_gene - 1, t_num + 2)); 
				}
			}
		}
	}
	if (n_dr_traits > 0) {
		for (mut in allmuts)
		{
			if (any(mut.position == range_genes))
			{
				mut.setMutationType(1);
				which_gene = asInteger((findInterval(mut.position, trait_locs) + 1) / 2);

				for (t_num in 1:n_dr_traits)
				{
					mut.setValue(paste0("dr_", t_num), effsize_pos.subset(which_gene - 1, t_num + 2 + n_trans_traits)); 
				}
			}
		}
	}
	

	defineGlobal("Host_states", labels);
}


1 early() {
	// Read into the contact network file
	lines_contact = readFile(contact_network_path);

	for (l in lines_contact)
	{
		if (strprefix(l, "#") == F)
		{
			ll = strsplit(l, " ");
			ll = asInteger(strsplit(l, " "));
			host = ll[0];
			contact_size = length(ll) - 1;
			if (contact_size > 0)
			{
				contact_dict = Dictionary();
				contact_dict.setValue("Contacts", ll[1:contact_size]);
				current_contact = Dictionary();
				current_contact.setValue("Contacts", host);
				sim.subpopulations[host].appendKeysAndValuesFrom(contact_dict);
				for (each_contact in ll[1:contact_size])
				{
					sim.subpopulations[each_contact].appendKeysAndValuesFrom(current_contact);
				}
			}
		}
		
		//contact_dict.clearKeysAndValues();
	}
}

s0 reproduction() {
	subpops_inds = sim.subpopulations.individuals;
	subpops = subpops_inds.subpopulation;
	num_inds = length(subpops_inds);
	for (pathogen in 1:num_inds)
	{
		this_pathogen = subpops_inds[pathogen - 1];
		subpops[pathogen - 1].addRecombinant(this_pathogen.genome1, NULL, NULL, NULL, NULL, NULL).tag = this_pathogen.tag;
	}
	self.active = 0;
}

s1 reproduction()
{
	// Transmission
	infectors = which(Host_states==2);
	subpops = sim.subpopulations;
	infector_subpops = subpops[infectors];

	for (infector_subpop in infector_subpops)
	{	
		contact_ids = infector_subpop.getValue("Contacts");
		if (length(contact_ids)>0)
		{
			infector_pathogen = sample(infector_subpop.individuals, 1);
			muts = infector_pathogen.genome1.mutationsOfType(1);
			transmissibility = 1 + additive_trait(muts, paste0("trans_", transmissibility_effsize[current_epoch]), cap_transmissibility[current_epoch]);

			trans_event = rbinom(length(contact_ids), 1, S_IE_rate[current_epoch] * transmissibility);
			contacts_states = Host_states[contact_ids];
			
			if (super_infection==T) 
			{
				infectee_id = contact_ids[which((trans_event==1)&(subpops[contact_ids].individualCount < cap_withinhost))];
			}
			else 
			{
				infectee_id = contact_ids[which((trans_event==1)&(contacts_states==0))];
			}

			for (i in infectee_id)
			{
				subpops[i].addRecombinant(infector_pathogen.genome1, NULL, NULL, NULL, NULL, NULL).tag = infector_pathogen.tag;
				line = paste(community.tick, infector_subpop.tag, i);
				writeFile(paste0(cwdir, runid, "/infection_raw.csv"), line, append=T, compress=T);
			}
		}
	}
	self.active=F;
}


s6 early()
{
	inds = sim.subpopulations.individuals;
	sim.killIndividuals(inds[inds.age > 0]);
}

s8 early()
{
	hosts = sim.subpopulations;
	
	// State transitions for exposed hosts
	e_inds = which(Host_states==1);

	draw_uniform = runif(length(e_inds));
	state_transition = findInterval(draw_uniform, c(0, E_I_rate[current_epoch], E_I_rate[current_epoch] + E_R_rate[current_epoch]));
	Host_states[e_inds[which(state_transition==0)]] = 2; // state_transition=0 means going from latent to active state (1>2)
	recover_from_e = e_inds[which(state_transition==1)];
	if (length(recover_from_e)>0)
	{
		Host_states[recover_from_e]=3;
		for (ind in recover_from_e)
		{
			line1 = paste(community.tick, ind + 1);
			writeFile(paste0(cwdir, runid, "/recovery.txt"), line1, append=T, compress=T);
		}
		sim.killIndividuals(hosts[recover_from_e].individuals);
	}
}

s3 early(){
	i_inds = which(Host_states==2);
	hosts = sim.subpopulations;
	draw_uniform = runif(length(i_inds));
	state_transition = findInterval(draw_uniform, c(0, sample_rate[current_epoch] * recovery_prob_after_sampling[current_epoch], sample_rate[current_epoch], I_R_rate[current_epoch] + sample_rate[current_epoch], I_R_rate[current_epoch] + sample_rate[current_epoch] + I_E_rate[current_epoch]));
	recover_from_i = i_inds[which((state_transition==0) | (state_transition==2))];
	sampled_inds = i_inds[which(state_transition<=1)];
	go_latent_inds = i_inds[which(state_transition==3)];
	
	if (length(sampled_inds)>0)
	{
		sampled_inds_genomes = c();
		for (ind in sampled_inds)
		{
			sampled_pathogen = sample(hosts[ind].individuals, 1);
			line1 = paste(community.tick, ind, sampled_pathogen.tag);
			writeFile(paste0(cwdir, runid, "/sample.csv"), line1, append=T, compress=T);
			sampled_inds_genomes = c(sampled_inds_genomes, sampled_pathogen);
		}
		sim.treeSeqRememberIndividuals(sampled_inds_genomes);
	}

	if (length(recover_from_i)>0)
	{
		Host_states[recover_from_i]=3;
		for (ind in recover_from_i)
		{
			line1 = paste(community.tick, ind + 1);
			writeFile(paste0(cwdir, runid, "/recovery.csv"), line1, append=T, compress=T);
		}
		sim.killIndividuals(hosts[recover_from_i].individuals);
	}

	if (length(go_latent_inds)>0)
	{
		Host_states[go_latent_inds]=1;
	}
}

s10 early(){
	hosts = sim.subpopulations;
	
	s_inds = which((Host_states==0)&(hosts.individualCount>0));


	for (s_ind in s_inds)
	{
		s_ind_pathogens = hosts[s_ind].individuals;
		remain_strain = sample(s_ind_pathogens, 1);
		sim.killIndividuals(s_ind_pathogens[which(s_ind_pathogens!=remain_strain)]);
	}

	draw_uniform = runif(length(s_inds));
	state_transition = findInterval(draw_uniform, c(0, latency_prob[current_epoch]));
	Host_states[s_inds[which(state_transition==0)]] = 1;    //state_transition=0 means going to latent state while =1 means going to active state
	Host_states[s_inds[which(state_transition > 0)]] = 2;
}

s9 early(){
	r_inds = which(Host_states==3);
	draw_uniform = runif(length(r_inds));
	state_transition = findInterval(draw_uniform, c(0, R_S_rate[current_epoch]));
	Host_states[r_inds[which(state_transition==0)]]=0;
}

s4 late()
{
	writeFile(paste0(cwdir, runid, "/SEIR_trajectory.csv"), paste0(sum(Host_states == 0), ", ", sum(Host_states == 1), ", ", sum(Host_states == 2), ", ", sum(Host_states == 3)), append=T, compress=T);

	all_pathogens = sim.subpopulations.individuals.tag;
	line = asString(sum(all_pathogens == 0));
	if (seed_size > 1)
	{
		for (seed in 2:seed_size)
		{
			line = paste0(line, ", ", sum(all_pathogens == seed - 1));
		}
	}
	writeFile(paste0(cwdir, runid, "/strain_trajectory.csv"), line, append=T, compress=T);
}

s5 late() 
{
	inds = sim.subpopulations.individuals;
	sim.killIndividuals(inds);
	sim.treeSeqOutput(paste0(cwdir, runid, "/sampled_genomes.trees"));
	sim.simulationFinished();
}
